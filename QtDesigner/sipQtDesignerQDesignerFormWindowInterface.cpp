/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtDesigner.h"

#line 31 "/media/dhankar/Dhankar_1/a1_18/a1_______QGIS/sip/QtDesigner/abstractformwindow.sip"
#include <abstractformwindow.h>
#line 34 "/media/dhankar/Dhankar_1/a1_18/a1_______QGIS/QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"

#line 35 "sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 38 "/media/dhankar/Dhankar_1/a1_18/a1_______QGIS/QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 35 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 41 "/media/dhankar/Dhankar_1/a1_18/a1_______QGIS/QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 36 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 44 "/media/dhankar/Dhankar_1/a1_18/a1_______QGIS/QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 36 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 47 "/media/dhankar/Dhankar_1/a1_18/a1_______QGIS/QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 34 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 50 "/media/dhankar/Dhankar_1/a1_18/a1_______QGIS/QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 31 "/media/dhankar/Dhankar_1/a1_18/a1_______QGIS/sip/QtDesigner/abstractformwindow.sip"
#include <abstractformwindow.h>
#line 53 "/media/dhankar/Dhankar_1/a1_18/a1_______QGIS/QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 35 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 56 "/media/dhankar/Dhankar_1/a1_18/a1_______QGIS/QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 31 "/media/dhankar/Dhankar_1/a1_18/a1_______QGIS/sip/QtDesigner/abstractformwindowcursor.sip"
#include <abstractformwindowcursor.h>
#line 59 "/media/dhankar/Dhankar_1/a1_18/a1_______QGIS/QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 31 "/media/dhankar/Dhankar_1/a1_18/a1_______QGIS/sip/QtDesigner/abstractformeditor.sip"
#include <abstractformeditor.h>
#line 62 "/media/dhankar/Dhankar_1/a1_18/a1_______QGIS/QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 35 "sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 65 "/media/dhankar/Dhankar_1/a1_18/a1_______QGIS/QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 35 "sip/QtCore/qdir.sip"
#include <qdir.h>
#line 68 "/media/dhankar/Dhankar_1/a1_18/a1_______QGIS/QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 35 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 71 "/media/dhankar/Dhankar_1/a1_18/a1_______QGIS/QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 31 "sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 74 "/media/dhankar/Dhankar_1/a1_18/a1_______QGIS/QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 37 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 77 "/media/dhankar/Dhankar_1/a1_18/a1_______QGIS/QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 35 "sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 80 "/media/dhankar/Dhankar_1/a1_18/a1_______QGIS/QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 35 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 83 "/media/dhankar/Dhankar_1/a1_18/a1_______QGIS/QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 35 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 86 "/media/dhankar/Dhankar_1/a1_18/a1_______QGIS/QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 39 "sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 89 "/media/dhankar/Dhankar_1/a1_18/a1_______QGIS/QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 35 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 92 "/media/dhankar/Dhankar_1/a1_18/a1_______QGIS/QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 35 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 95 "/media/dhankar/Dhankar_1/a1_18/a1_______QGIS/QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 39 "sip/QtGui/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 98 "/media/dhankar/Dhankar_1/a1_18/a1_______QGIS/QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 33 "sip/QtGui/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 101 "/media/dhankar/Dhankar_1/a1_18/a1_______QGIS/QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 455 "sip/QtCore/qglobal.sip"
#include <QtGlobal>
#line 104 "/media/dhankar/Dhankar_1/a1_18/a1_______QGIS/QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 35 "sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 107 "/media/dhankar/Dhankar_1/a1_18/a1_______QGIS/QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 35 "sip/QtGui/qregion.sip"
#include <qregion.h>
#line 110 "/media/dhankar/Dhankar_1/a1_18/a1_______QGIS/QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 35 "sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 113 "/media/dhankar/Dhankar_1/a1_18/a1_______QGIS/QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 35 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 116 "/media/dhankar/Dhankar_1/a1_18/a1_______QGIS/QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 31 "sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 119 "/media/dhankar/Dhankar_1/a1_18/a1_______QGIS/QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 31 "sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 122 "/media/dhankar/Dhankar_1/a1_18/a1_______QGIS/QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 35 "sip/QtGui/qfont.sip"
#include <qfont.h>
#line 125 "/media/dhankar/Dhankar_1/a1_18/a1_______QGIS/QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 274 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 128 "/media/dhankar/Dhankar_1/a1_18/a1_______QGIS/QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 656 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 131 "/media/dhankar/Dhankar_1/a1_18/a1_______QGIS/QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 31 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 134 "/media/dhankar/Dhankar_1/a1_18/a1_______QGIS/QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 616 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 137 "/media/dhankar/Dhankar_1/a1_18/a1_______QGIS/QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 605 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 140 "/media/dhankar/Dhankar_1/a1_18/a1_______QGIS/QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 718 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 143 "/media/dhankar/Dhankar_1/a1_18/a1_______QGIS/QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 801 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 146 "/media/dhankar/Dhankar_1/a1_18/a1_______QGIS/QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 774 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 149 "/media/dhankar/Dhankar_1/a1_18/a1_______QGIS/QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 790 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 152 "/media/dhankar/Dhankar_1/a1_18/a1_______QGIS/QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 863 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 155 "/media/dhankar/Dhankar_1/a1_18/a1_______QGIS/QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 412 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 158 "/media/dhankar/Dhankar_1/a1_18/a1_______QGIS/QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 627 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 161 "/media/dhankar/Dhankar_1/a1_18/a1_______QGIS/QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 583 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 164 "/media/dhankar/Dhankar_1/a1_18/a1_______QGIS/QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 570 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 167 "/media/dhankar/Dhankar_1/a1_18/a1_______QGIS/QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 557 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 170 "/media/dhankar/Dhankar_1/a1_18/a1_______QGIS/QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 533 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 173 "/media/dhankar/Dhankar_1/a1_18/a1_______QGIS/QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 514 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 176 "/media/dhankar/Dhankar_1/a1_18/a1_______QGIS/QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 483 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 179 "/media/dhankar/Dhankar_1/a1_18/a1_______QGIS/QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 356 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 182 "/media/dhankar/Dhankar_1/a1_18/a1_______QGIS/QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 261 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 185 "/media/dhankar/Dhankar_1/a1_18/a1_______QGIS/QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 61 "sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 188 "/media/dhankar/Dhankar_1/a1_18/a1_______QGIS/QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 120 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 191 "/media/dhankar/Dhankar_1/a1_18/a1_______QGIS/QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 31 "sip/QtGui/qaction.sip"
#include <qaction.h>
#line 194 "/media/dhankar/Dhankar_1/a1_18/a1_______QGIS/QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 31 "sip/QtGui/qlayout.sip"
#include <qlayout.h>
#line 197 "/media/dhankar/Dhankar_1/a1_18/a1_______QGIS/QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 35 "sip/QtGui/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 200 "/media/dhankar/Dhankar_1/a1_18/a1_______QGIS/QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 35 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 203 "/media/dhankar/Dhankar_1/a1_18/a1_______QGIS/QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 35 "sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 206 "/media/dhankar/Dhankar_1/a1_18/a1_______QGIS/QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 35 "sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 209 "/media/dhankar/Dhankar_1/a1_18/a1_______QGIS/QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 35 "sip/QtGui/qicon.sip"
#include <qicon.h>
#line 212 "/media/dhankar/Dhankar_1/a1_18/a1_______QGIS/QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 35 "sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 215 "/media/dhankar/Dhankar_1/a1_18/a1_______QGIS/QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 35 "sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 218 "/media/dhankar/Dhankar_1/a1_18/a1_______QGIS/QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 35 "sip/QtGui/qstyle.sip"
#include <qstyle.h>
#line 221 "/media/dhankar/Dhankar_1/a1_18/a1_______QGIS/QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 35 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 224 "/media/dhankar/Dhankar_1/a1_18/a1_______QGIS/QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 355 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 227 "/media/dhankar/Dhankar_1/a1_18/a1_______QGIS/QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 338 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 230 "/media/dhankar/Dhankar_1/a1_18/a1_______QGIS/QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 33 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 233 "/media/dhankar/Dhankar_1/a1_18/a1_______QGIS/QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 120 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 236 "/media/dhankar/Dhankar_1/a1_18/a1_______QGIS/QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 31 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 239 "/media/dhankar/Dhankar_1/a1_18/a1_______QGIS/QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 35 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 242 "/media/dhankar/Dhankar_1/a1_18/a1_______QGIS/QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 31 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 245 "/media/dhankar/Dhankar_1/a1_18/a1_______QGIS/QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"


PyDoc_STRVAR(doc_QDesignerFormWindowInterface_fileName, "fileName(self) -> QString");

extern "C" {static PyObject *meth_QDesignerFormWindowInterface_fileName(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowInterface_fileName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QDesignerFormWindowInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDesignerFormWindowInterface, &sipCpp))
        {
            QString*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerFormWindowInterface, sipName_fileName);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->fileName());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowInterface, sipName_fileName, doc_QDesignerFormWindowInterface_fileName);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowInterface_absoluteDir, "absoluteDir(self) -> QDir");

extern "C" {static PyObject *meth_QDesignerFormWindowInterface_absoluteDir(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowInterface_absoluteDir(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QDesignerFormWindowInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDesignerFormWindowInterface, &sipCpp))
        {
            QDir*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerFormWindowInterface, sipName_absoluteDir);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDir(sipCpp->absoluteDir());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QDir,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowInterface, sipName_absoluteDir, doc_QDesignerFormWindowInterface_absoluteDir);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowInterface_contents, "contents(self) -> QString");

extern "C" {static PyObject *meth_QDesignerFormWindowInterface_contents(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowInterface_contents(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QDesignerFormWindowInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDesignerFormWindowInterface, &sipCpp))
        {
            QString*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerFormWindowInterface, sipName_contents);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->contents());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowInterface, sipName_contents, doc_QDesignerFormWindowInterface_contents);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowInterface_setContents, "setContents(self, QIODevice, errorMessage: QString = None) -> bool\n"
    "setContents(self, QString) -> bool");

extern "C" {static PyObject *meth_QDesignerFormWindowInterface_setContents(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowInterface_setContents(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QIODevice* a0;
        QString* a1 = 0;
        int a1State = 0;
        QDesignerFormWindowInterface *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_errorMessage,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8|J0", &sipSelf, sipType_QDesignerFormWindowInterface, &sipCpp, sipType_QIODevice, &a0, sipType_QString,&a1, &a1State))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerFormWindowInterface, sipName_setContents);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->setContents(a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(a1,sipType_QString,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        QDesignerFormWindowInterface *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1", &sipSelf, sipType_QDesignerFormWindowInterface, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerFormWindowInterface, sipName_setContents);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->setContents(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowInterface, sipName_setContents, doc_QDesignerFormWindowInterface_setContents);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowInterface_features, "features(self) -> QDesignerFormWindowInterface.Feature");

extern "C" {static PyObject *meth_QDesignerFormWindowInterface_features(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowInterface_features(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QDesignerFormWindowInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDesignerFormWindowInterface, &sipCpp))
        {
            QDesignerFormWindowInterface::Feature*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerFormWindowInterface, sipName_features);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDesignerFormWindowInterface::Feature(sipCpp->features());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QDesignerFormWindowInterface_Feature,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowInterface, sipName_features, doc_QDesignerFormWindowInterface_features);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowInterface_hasFeature, "hasFeature(self, QDesignerFormWindowInterface.Feature) -> bool");

extern "C" {static PyObject *meth_QDesignerFormWindowInterface_hasFeature(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowInterface_hasFeature(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QDesignerFormWindowInterface::Feature* a0;
        int a0State = 0;
        const QDesignerFormWindowInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDesignerFormWindowInterface, &sipCpp, sipType_QDesignerFormWindowInterface_Feature, &a0, &a0State))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerFormWindowInterface, sipName_hasFeature);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->hasFeature(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QDesignerFormWindowInterface_Feature,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowInterface, sipName_hasFeature, doc_QDesignerFormWindowInterface_hasFeature);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowInterface_author, "author(self) -> QString");

extern "C" {static PyObject *meth_QDesignerFormWindowInterface_author(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowInterface_author(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QDesignerFormWindowInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDesignerFormWindowInterface, &sipCpp))
        {
            QString*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerFormWindowInterface, sipName_author);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->author());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowInterface, sipName_author, doc_QDesignerFormWindowInterface_author);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowInterface_setAuthor, "setAuthor(self, QString)");

extern "C" {static PyObject *meth_QDesignerFormWindowInterface_setAuthor(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowInterface_setAuthor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QString* a0;
        int a0State = 0;
        QDesignerFormWindowInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDesignerFormWindowInterface, &sipCpp, sipType_QString,&a0, &a0State))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerFormWindowInterface, sipName_setAuthor);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAuthor(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowInterface, sipName_setAuthor, doc_QDesignerFormWindowInterface_setAuthor);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowInterface_comment, "comment(self) -> QString");

extern "C" {static PyObject *meth_QDesignerFormWindowInterface_comment(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowInterface_comment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QDesignerFormWindowInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDesignerFormWindowInterface, &sipCpp))
        {
            QString*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerFormWindowInterface, sipName_comment);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->comment());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowInterface, sipName_comment, doc_QDesignerFormWindowInterface_comment);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowInterface_setComment, "setComment(self, QString)");

extern "C" {static PyObject *meth_QDesignerFormWindowInterface_setComment(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowInterface_setComment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QString* a0;
        int a0State = 0;
        QDesignerFormWindowInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDesignerFormWindowInterface, &sipCpp, sipType_QString,&a0, &a0State))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerFormWindowInterface, sipName_setComment);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipCpp->setComment(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowInterface, sipName_setComment, doc_QDesignerFormWindowInterface_setComment);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowInterface_layoutDefault, "layoutDefault(self) -> Tuple[int, int]");

extern "C" {static PyObject *meth_QDesignerFormWindowInterface_layoutDefault(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowInterface_layoutDefault(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
        int a1;
        QDesignerFormWindowInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDesignerFormWindowInterface, &sipCpp))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerFormWindowInterface, sipName_layoutDefault);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipCpp->layoutDefault(&a0,&a1);
            Py_END_ALLOW_THREADS

            return sipBuildResult(0,"(ii)",a0,a1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowInterface, sipName_layoutDefault, doc_QDesignerFormWindowInterface_layoutDefault);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowInterface_setLayoutDefault, "setLayoutDefault(self, int, int)");

extern "C" {static PyObject *meth_QDesignerFormWindowInterface_setLayoutDefault(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowInterface_setLayoutDefault(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
        int a1;
        QDesignerFormWindowInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QDesignerFormWindowInterface, &sipCpp, &a0, &a1))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerFormWindowInterface, sipName_setLayoutDefault);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipCpp->setLayoutDefault(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowInterface, sipName_setLayoutDefault, doc_QDesignerFormWindowInterface_setLayoutDefault);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowInterface_layoutFunction, "layoutFunction(self) -> Tuple[QString, QString]");

extern "C" {static PyObject *meth_QDesignerFormWindowInterface_layoutFunction(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowInterface_layoutFunction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QString* a0;
        QString* a1;
        QDesignerFormWindowInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDesignerFormWindowInterface, &sipCpp))
        {
            a0 = new QString();
            a1 = new QString();

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerFormWindowInterface, sipName_layoutFunction);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipCpp->layoutFunction(a0,a1);
            Py_END_ALLOW_THREADS

            return sipBuildResult(0,"(NN)",a0,sipType_QString,NULL,a1,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowInterface, sipName_layoutFunction, doc_QDesignerFormWindowInterface_layoutFunction);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowInterface_setLayoutFunction, "setLayoutFunction(self, QString, QString)");

extern "C" {static PyObject *meth_QDesignerFormWindowInterface_setLayoutFunction(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowInterface_setLayoutFunction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QString* a0;
        int a0State = 0;
        const QString* a1;
        int a1State = 0;
        QDesignerFormWindowInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QDesignerFormWindowInterface, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerFormWindowInterface, sipName_setLayoutFunction);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipCpp->setLayoutFunction(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowInterface, sipName_setLayoutFunction, doc_QDesignerFormWindowInterface_setLayoutFunction);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowInterface_pixmapFunction, "pixmapFunction(self) -> QString");

extern "C" {static PyObject *meth_QDesignerFormWindowInterface_pixmapFunction(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowInterface_pixmapFunction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QDesignerFormWindowInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDesignerFormWindowInterface, &sipCpp))
        {
            QString*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerFormWindowInterface, sipName_pixmapFunction);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->pixmapFunction());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowInterface, sipName_pixmapFunction, doc_QDesignerFormWindowInterface_pixmapFunction);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowInterface_setPixmapFunction, "setPixmapFunction(self, QString)");

extern "C" {static PyObject *meth_QDesignerFormWindowInterface_setPixmapFunction(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowInterface_setPixmapFunction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QString* a0;
        int a0State = 0;
        QDesignerFormWindowInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDesignerFormWindowInterface, &sipCpp, sipType_QString,&a0, &a0State))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerFormWindowInterface, sipName_setPixmapFunction);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPixmapFunction(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowInterface, sipName_setPixmapFunction, doc_QDesignerFormWindowInterface_setPixmapFunction);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowInterface_exportMacro, "exportMacro(self) -> QString");

extern "C" {static PyObject *meth_QDesignerFormWindowInterface_exportMacro(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowInterface_exportMacro(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QDesignerFormWindowInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDesignerFormWindowInterface, &sipCpp))
        {
            QString*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerFormWindowInterface, sipName_exportMacro);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->exportMacro());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowInterface, sipName_exportMacro, doc_QDesignerFormWindowInterface_exportMacro);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowInterface_setExportMacro, "setExportMacro(self, QString)");

extern "C" {static PyObject *meth_QDesignerFormWindowInterface_setExportMacro(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowInterface_setExportMacro(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QString* a0;
        int a0State = 0;
        QDesignerFormWindowInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDesignerFormWindowInterface, &sipCpp, sipType_QString,&a0, &a0State))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerFormWindowInterface, sipName_setExportMacro);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipCpp->setExportMacro(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowInterface, sipName_setExportMacro, doc_QDesignerFormWindowInterface_setExportMacro);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowInterface_includeHints, "includeHints(self) -> QStringList");

extern "C" {static PyObject *meth_QDesignerFormWindowInterface_includeHints(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowInterface_includeHints(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QDesignerFormWindowInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDesignerFormWindowInterface, &sipCpp))
        {
            QStringList*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerFormWindowInterface, sipName_includeHints);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringList(sipCpp->includeHints());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowInterface, sipName_includeHints, doc_QDesignerFormWindowInterface_includeHints);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowInterface_setIncludeHints, "setIncludeHints(self, QStringList)");

extern "C" {static PyObject *meth_QDesignerFormWindowInterface_setIncludeHints(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowInterface_setIncludeHints(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QStringList* a0;
        int a0State = 0;
        QDesignerFormWindowInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDesignerFormWindowInterface, &sipCpp, sipType_QStringList,&a0, &a0State))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerFormWindowInterface, sipName_setIncludeHints);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipCpp->setIncludeHints(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QStringList *>(a0),sipType_QStringList,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowInterface, sipName_setIncludeHints, doc_QDesignerFormWindowInterface_setIncludeHints);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowInterface_core, "core(self) -> QDesignerFormEditorInterface");

extern "C" {static PyObject *meth_QDesignerFormWindowInterface_core(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowInterface_core(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QDesignerFormWindowInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDesignerFormWindowInterface, &sipCpp))
        {
            QDesignerFormEditorInterface*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QDesignerFormWindowInterface::core() : sipCpp->core());
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDesignerFormEditorInterface,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowInterface, sipName_core, doc_QDesignerFormWindowInterface_core);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowInterface_cursor, "cursor(self) -> QDesignerFormWindowCursorInterface");

extern "C" {static PyObject *meth_QDesignerFormWindowInterface_cursor(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowInterface_cursor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QDesignerFormWindowInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDesignerFormWindowInterface, &sipCpp))
        {
            QDesignerFormWindowCursorInterface*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerFormWindowInterface, sipName_cursor);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->cursor();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDesignerFormWindowCursorInterface,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowInterface, sipName_cursor, doc_QDesignerFormWindowInterface_cursor);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowInterface_grid, "grid(self) -> QPoint");

extern "C" {static PyObject *meth_QDesignerFormWindowInterface_grid(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowInterface_grid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QDesignerFormWindowInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDesignerFormWindowInterface, &sipCpp))
        {
            QPoint*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerFormWindowInterface, sipName_grid);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPoint(sipCpp->grid());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPoint,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowInterface, sipName_grid, doc_QDesignerFormWindowInterface_grid);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowInterface_mainContainer, "mainContainer(self) -> QWidget");

extern "C" {static PyObject *meth_QDesignerFormWindowInterface_mainContainer(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowInterface_mainContainer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QDesignerFormWindowInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDesignerFormWindowInterface, &sipCpp))
        {
            QWidget*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerFormWindowInterface, sipName_mainContainer);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->mainContainer();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowInterface, sipName_mainContainer, doc_QDesignerFormWindowInterface_mainContainer);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowInterface_setMainContainer, "setMainContainer(self, QWidget)");

extern "C" {static PyObject *meth_QDesignerFormWindowInterface_setMainContainer(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowInterface_setMainContainer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QWidget* a0;
        PyObject *a0Keep;
        QDesignerFormWindowInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QDesignerFormWindowInterface, &sipCpp, &a0Keep, sipType_QWidget, &a0))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerFormWindowInterface, sipName_setMainContainer);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipCpp->setMainContainer(a0);
            Py_END_ALLOW_THREADS

            sipKeepReference(sipSelf, -6, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowInterface, sipName_setMainContainer, doc_QDesignerFormWindowInterface_setMainContainer);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowInterface_isManaged, "isManaged(self, QWidget) -> bool");

extern "C" {static PyObject *meth_QDesignerFormWindowInterface_isManaged(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowInterface_isManaged(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QWidget* a0;
        const QDesignerFormWindowInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QDesignerFormWindowInterface, &sipCpp, sipType_QWidget, &a0))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerFormWindowInterface, sipName_isManaged);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isManaged(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowInterface, sipName_isManaged, doc_QDesignerFormWindowInterface_isManaged);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowInterface_isDirty, "isDirty(self) -> bool");

extern "C" {static PyObject *meth_QDesignerFormWindowInterface_isDirty(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowInterface_isDirty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QDesignerFormWindowInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDesignerFormWindowInterface, &sipCpp))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerFormWindowInterface, sipName_isDirty);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isDirty();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowInterface, sipName_isDirty, doc_QDesignerFormWindowInterface_isDirty);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowInterface_findFormWindow, "findFormWindow(QWidget) -> QDesignerFormWindowInterface\n"
    "findFormWindow(QObject) -> QDesignerFormWindowInterface");

extern "C" {static PyObject *meth_QDesignerFormWindowInterface_findFormWindow(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowInterface_findFormWindow(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8", sipType_QWidget, &a0))
        {
            QDesignerFormWindowInterface*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QDesignerFormWindowInterface::findFormWindow(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDesignerFormWindowInterface,NULL);
        }
    }

    {
        QObject* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8", sipType_QObject, &a0))
        {
            QDesignerFormWindowInterface*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QDesignerFormWindowInterface::findFormWindow(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDesignerFormWindowInterface,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowInterface, sipName_findFormWindow, doc_QDesignerFormWindowInterface_findFormWindow);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowInterface_emitSelectionChanged, "emitSelectionChanged(self)");

extern "C" {static PyObject *meth_QDesignerFormWindowInterface_emitSelectionChanged(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowInterface_emitSelectionChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QDesignerFormWindowInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDesignerFormWindowInterface, &sipCpp))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerFormWindowInterface, sipName_emitSelectionChanged);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipCpp->emitSelectionChanged();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowInterface, sipName_emitSelectionChanged, doc_QDesignerFormWindowInterface_emitSelectionChanged);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowInterface_resourceFiles, "resourceFiles(self) -> QStringList");

extern "C" {static PyObject *meth_QDesignerFormWindowInterface_resourceFiles(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowInterface_resourceFiles(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QDesignerFormWindowInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDesignerFormWindowInterface, &sipCpp))
        {
            QStringList*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerFormWindowInterface, sipName_resourceFiles);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringList(sipCpp->resourceFiles());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowInterface, sipName_resourceFiles, doc_QDesignerFormWindowInterface_resourceFiles);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowInterface_addResourceFile, "addResourceFile(self, QString)");

extern "C" {static PyObject *meth_QDesignerFormWindowInterface_addResourceFile(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowInterface_addResourceFile(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QString* a0;
        int a0State = 0;
        QDesignerFormWindowInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDesignerFormWindowInterface, &sipCpp, sipType_QString,&a0, &a0State))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerFormWindowInterface, sipName_addResourceFile);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipCpp->addResourceFile(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowInterface, sipName_addResourceFile, doc_QDesignerFormWindowInterface_addResourceFile);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowInterface_removeResourceFile, "removeResourceFile(self, QString)");

extern "C" {static PyObject *meth_QDesignerFormWindowInterface_removeResourceFile(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowInterface_removeResourceFile(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QString* a0;
        int a0State = 0;
        QDesignerFormWindowInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDesignerFormWindowInterface, &sipCpp, sipType_QString,&a0, &a0State))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerFormWindowInterface, sipName_removeResourceFile);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipCpp->removeResourceFile(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowInterface, sipName_removeResourceFile, doc_QDesignerFormWindowInterface_removeResourceFile);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowInterface_manageWidget, "manageWidget(self, QWidget)");

extern "C" {static PyObject *meth_QDesignerFormWindowInterface_manageWidget(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowInterface_manageWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QWidget* a0;
        QDesignerFormWindowInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QDesignerFormWindowInterface, &sipCpp, sipType_QWidget, &a0))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerFormWindowInterface, sipName_manageWidget);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipCpp->manageWidget(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowInterface, sipName_manageWidget, doc_QDesignerFormWindowInterface_manageWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowInterface_unmanageWidget, "unmanageWidget(self, QWidget)");

extern "C" {static PyObject *meth_QDesignerFormWindowInterface_unmanageWidget(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowInterface_unmanageWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QWidget* a0;
        QDesignerFormWindowInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QDesignerFormWindowInterface, &sipCpp, sipType_QWidget, &a0))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerFormWindowInterface, sipName_unmanageWidget);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipCpp->unmanageWidget(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowInterface, sipName_unmanageWidget, doc_QDesignerFormWindowInterface_unmanageWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowInterface_setFeatures, "setFeatures(self, QDesignerFormWindowInterface.Feature)");

extern "C" {static PyObject *meth_QDesignerFormWindowInterface_setFeatures(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowInterface_setFeatures(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QDesignerFormWindowInterface::Feature* a0;
        int a0State = 0;
        QDesignerFormWindowInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDesignerFormWindowInterface, &sipCpp, sipType_QDesignerFormWindowInterface_Feature, &a0, &a0State))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerFormWindowInterface, sipName_setFeatures);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFeatures(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QDesignerFormWindowInterface_Feature,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowInterface, sipName_setFeatures, doc_QDesignerFormWindowInterface_setFeatures);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowInterface_setDirty, "setDirty(self, bool)");

extern "C" {static PyObject *meth_QDesignerFormWindowInterface_setDirty(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowInterface_setDirty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        bool a0;
        QDesignerFormWindowInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QDesignerFormWindowInterface, &sipCpp, &a0))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerFormWindowInterface, sipName_setDirty);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDirty(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowInterface, sipName_setDirty, doc_QDesignerFormWindowInterface_setDirty);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowInterface_clearSelection, "clearSelection(self, update: bool = True)");

extern "C" {static PyObject *meth_QDesignerFormWindowInterface_clearSelection(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowInterface_clearSelection(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        bool a0 = 1;
        QDesignerFormWindowInterface *sipCpp;

        static const char *sipKwdList[] = {
            sipName_update,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|b", &sipSelf, sipType_QDesignerFormWindowInterface, &sipCpp, &a0))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerFormWindowInterface, sipName_clearSelection);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipCpp->clearSelection(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowInterface, sipName_clearSelection, doc_QDesignerFormWindowInterface_clearSelection);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowInterface_selectWidget, "selectWidget(self, QWidget, select: bool = True)");

extern "C" {static PyObject *meth_QDesignerFormWindowInterface_selectWidget(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowInterface_selectWidget(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QWidget* a0;
        bool a1 = 1;
        QDesignerFormWindowInterface *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_select,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8|b", &sipSelf, sipType_QDesignerFormWindowInterface, &sipCpp, sipType_QWidget, &a0, &a1))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerFormWindowInterface, sipName_selectWidget);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipCpp->selectWidget(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowInterface, sipName_selectWidget, doc_QDesignerFormWindowInterface_selectWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowInterface_setGrid, "setGrid(self, QPoint)");

extern "C" {static PyObject *meth_QDesignerFormWindowInterface_setGrid(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowInterface_setGrid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QPoint* a0;
        QDesignerFormWindowInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QDesignerFormWindowInterface, &sipCpp, sipType_QPoint, &a0))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerFormWindowInterface, sipName_setGrid);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipCpp->setGrid(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowInterface, sipName_setGrid, doc_QDesignerFormWindowInterface_setGrid);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowInterface_setFileName, "setFileName(self, QString)");

extern "C" {static PyObject *meth_QDesignerFormWindowInterface_setFileName(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowInterface_setFileName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QString* a0;
        int a0State = 0;
        QDesignerFormWindowInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDesignerFormWindowInterface, &sipCpp, sipType_QString,&a0, &a0State))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerFormWindowInterface, sipName_setFileName);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFileName(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowInterface, sipName_setFileName, doc_QDesignerFormWindowInterface_setFileName);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowInterface_checkContents, "checkContents(self) -> QStringList");

extern "C" {static PyObject *meth_QDesignerFormWindowInterface_checkContents(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowInterface_checkContents(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QDesignerFormWindowInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDesignerFormWindowInterface, &sipCpp))
        {
            QStringList*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerFormWindowInterface, sipName_checkContents);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringList(sipCpp->checkContents());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowInterface, sipName_checkContents, doc_QDesignerFormWindowInterface_checkContents);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowInterface_activeResourceFilePaths, "activeResourceFilePaths(self) -> QStringList");

extern "C" {static PyObject *meth_QDesignerFormWindowInterface_activeResourceFilePaths(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowInterface_activeResourceFilePaths(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDesignerFormWindowInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDesignerFormWindowInterface, &sipCpp))
        {
            QStringList*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringList(sipCpp->activeResourceFilePaths());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowInterface, sipName_activeResourceFilePaths, doc_QDesignerFormWindowInterface_activeResourceFilePaths);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowInterface_formContainer, "formContainer(self) -> QWidget");

extern "C" {static PyObject *meth_QDesignerFormWindowInterface_formContainer(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowInterface_formContainer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QDesignerFormWindowInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDesignerFormWindowInterface, &sipCpp))
        {
            QWidget*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerFormWindowInterface, sipName_formContainer);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->formContainer();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowInterface, sipName_formContainer, doc_QDesignerFormWindowInterface_formContainer);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowInterface_activateResourceFilePaths, "activateResourceFilePaths(self, QStringList) -> Tuple[int, QString]");

extern "C" {static PyObject *meth_QDesignerFormWindowInterface_activateResourceFilePaths(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowInterface_activateResourceFilePaths(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QStringList* a0;
        int a0State = 0;
        int a1;
        QString* a2;
        QDesignerFormWindowInterface *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_QDesignerFormWindowInterface, &sipCpp, sipType_QStringList,&a0, &a0State))
        {
            a2 = new QString();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->activateResourceFilePaths(*a0,&a1,a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QStringList *>(a0),sipType_QStringList,a0State);

            return sipBuildResult(0,"(iN)",a1,a2,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowInterface, sipName_activateResourceFilePaths, doc_QDesignerFormWindowInterface_activateResourceFilePaths);

    return NULL;
}


/* Cast a pointer to a type somewhere in its multiple inheritance hierarchy. */
extern "C" {static void *cast_QDesignerFormWindowInterface(void *, const sipTypeDef *);}
static void *cast_QDesignerFormWindowInterface(void *sipCppV, const sipTypeDef *targetType)
{
    QDesignerFormWindowInterface *sipCpp = reinterpret_cast<QDesignerFormWindowInterface *>(sipCppV);

    if (targetType == sipType_QPaintDevice)
        return static_cast<QPaintDevice *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QDesignerFormWindowInterface(void *, int);}
static void release_QDesignerFormWindowInterface(void *sipCppV,int)
{
    QDesignerFormWindowInterface *sipCpp = reinterpret_cast<QDesignerFormWindowInterface *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QDesignerFormWindowInterface(sipSimpleWrapper *);}
static void dealloc_QDesignerFormWindowInterface(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QDesignerFormWindowInterface(sipGetAddress(sipSelf),0);
    }
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QDesignerFormWindowInterface[] = {{738, 1, 1}};


static PyMethodDef methods_QDesignerFormWindowInterface[] = {
    {SIP_MLNAME_CAST(sipName_absoluteDir), meth_QDesignerFormWindowInterface_absoluteDir, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowInterface_absoluteDir)},
    {SIP_MLNAME_CAST(sipName_activateResourceFilePaths), (PyCFunction)meth_QDesignerFormWindowInterface_activateResourceFilePaths, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QDesignerFormWindowInterface_activateResourceFilePaths)},
    {SIP_MLNAME_CAST(sipName_activeResourceFilePaths), meth_QDesignerFormWindowInterface_activeResourceFilePaths, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowInterface_activeResourceFilePaths)},
    {SIP_MLNAME_CAST(sipName_addResourceFile), meth_QDesignerFormWindowInterface_addResourceFile, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowInterface_addResourceFile)},
    {SIP_MLNAME_CAST(sipName_author), meth_QDesignerFormWindowInterface_author, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowInterface_author)},
    {SIP_MLNAME_CAST(sipName_checkContents), meth_QDesignerFormWindowInterface_checkContents, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowInterface_checkContents)},
    {SIP_MLNAME_CAST(sipName_clearSelection), (PyCFunction)meth_QDesignerFormWindowInterface_clearSelection, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QDesignerFormWindowInterface_clearSelection)},
    {SIP_MLNAME_CAST(sipName_comment), meth_QDesignerFormWindowInterface_comment, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowInterface_comment)},
    {SIP_MLNAME_CAST(sipName_contents), meth_QDesignerFormWindowInterface_contents, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowInterface_contents)},
    {SIP_MLNAME_CAST(sipName_core), meth_QDesignerFormWindowInterface_core, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowInterface_core)},
    {SIP_MLNAME_CAST(sipName_cursor), meth_QDesignerFormWindowInterface_cursor, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowInterface_cursor)},
    {SIP_MLNAME_CAST(sipName_emitSelectionChanged), meth_QDesignerFormWindowInterface_emitSelectionChanged, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowInterface_emitSelectionChanged)},
    {SIP_MLNAME_CAST(sipName_exportMacro), meth_QDesignerFormWindowInterface_exportMacro, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowInterface_exportMacro)},
    {SIP_MLNAME_CAST(sipName_features), meth_QDesignerFormWindowInterface_features, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowInterface_features)},
    {SIP_MLNAME_CAST(sipName_fileName), meth_QDesignerFormWindowInterface_fileName, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowInterface_fileName)},
    {SIP_MLNAME_CAST(sipName_findFormWindow), meth_QDesignerFormWindowInterface_findFormWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowInterface_findFormWindow)},
    {SIP_MLNAME_CAST(sipName_formContainer), meth_QDesignerFormWindowInterface_formContainer, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowInterface_formContainer)},
    {SIP_MLNAME_CAST(sipName_grid), meth_QDesignerFormWindowInterface_grid, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowInterface_grid)},
    {SIP_MLNAME_CAST(sipName_hasFeature), meth_QDesignerFormWindowInterface_hasFeature, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowInterface_hasFeature)},
    {SIP_MLNAME_CAST(sipName_includeHints), meth_QDesignerFormWindowInterface_includeHints, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowInterface_includeHints)},
    {SIP_MLNAME_CAST(sipName_isDirty), meth_QDesignerFormWindowInterface_isDirty, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowInterface_isDirty)},
    {SIP_MLNAME_CAST(sipName_isManaged), meth_QDesignerFormWindowInterface_isManaged, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowInterface_isManaged)},
    {SIP_MLNAME_CAST(sipName_layoutDefault), meth_QDesignerFormWindowInterface_layoutDefault, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowInterface_layoutDefault)},
    {SIP_MLNAME_CAST(sipName_layoutFunction), meth_QDesignerFormWindowInterface_layoutFunction, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowInterface_layoutFunction)},
    {SIP_MLNAME_CAST(sipName_mainContainer), meth_QDesignerFormWindowInterface_mainContainer, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowInterface_mainContainer)},
    {SIP_MLNAME_CAST(sipName_manageWidget), meth_QDesignerFormWindowInterface_manageWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowInterface_manageWidget)},
    {SIP_MLNAME_CAST(sipName_pixmapFunction), meth_QDesignerFormWindowInterface_pixmapFunction, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowInterface_pixmapFunction)},
    {SIP_MLNAME_CAST(sipName_removeResourceFile), meth_QDesignerFormWindowInterface_removeResourceFile, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowInterface_removeResourceFile)},
    {SIP_MLNAME_CAST(sipName_resourceFiles), meth_QDesignerFormWindowInterface_resourceFiles, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowInterface_resourceFiles)},
    {SIP_MLNAME_CAST(sipName_selectWidget), (PyCFunction)meth_QDesignerFormWindowInterface_selectWidget, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QDesignerFormWindowInterface_selectWidget)},
    {SIP_MLNAME_CAST(sipName_setAuthor), meth_QDesignerFormWindowInterface_setAuthor, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowInterface_setAuthor)},
    {SIP_MLNAME_CAST(sipName_setComment), meth_QDesignerFormWindowInterface_setComment, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowInterface_setComment)},
    {SIP_MLNAME_CAST(sipName_setContents), (PyCFunction)meth_QDesignerFormWindowInterface_setContents, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QDesignerFormWindowInterface_setContents)},
    {SIP_MLNAME_CAST(sipName_setDirty), meth_QDesignerFormWindowInterface_setDirty, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowInterface_setDirty)},
    {SIP_MLNAME_CAST(sipName_setExportMacro), meth_QDesignerFormWindowInterface_setExportMacro, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowInterface_setExportMacro)},
    {SIP_MLNAME_CAST(sipName_setFeatures), meth_QDesignerFormWindowInterface_setFeatures, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowInterface_setFeatures)},
    {SIP_MLNAME_CAST(sipName_setFileName), meth_QDesignerFormWindowInterface_setFileName, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowInterface_setFileName)},
    {SIP_MLNAME_CAST(sipName_setGrid), meth_QDesignerFormWindowInterface_setGrid, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowInterface_setGrid)},
    {SIP_MLNAME_CAST(sipName_setIncludeHints), meth_QDesignerFormWindowInterface_setIncludeHints, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowInterface_setIncludeHints)},
    {SIP_MLNAME_CAST(sipName_setLayoutDefault), meth_QDesignerFormWindowInterface_setLayoutDefault, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowInterface_setLayoutDefault)},
    {SIP_MLNAME_CAST(sipName_setLayoutFunction), meth_QDesignerFormWindowInterface_setLayoutFunction, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowInterface_setLayoutFunction)},
    {SIP_MLNAME_CAST(sipName_setMainContainer), meth_QDesignerFormWindowInterface_setMainContainer, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowInterface_setMainContainer)},
    {SIP_MLNAME_CAST(sipName_setPixmapFunction), meth_QDesignerFormWindowInterface_setPixmapFunction, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowInterface_setPixmapFunction)},
    {SIP_MLNAME_CAST(sipName_unmanageWidget), meth_QDesignerFormWindowInterface_unmanageWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowInterface_unmanageWidget)}
};

static sipEnumMemberDef enummembers_QDesignerFormWindowInterface[] = {
    {sipName_DefaultFeature, static_cast<int>(QDesignerFormWindowInterface::DefaultFeature), 13},
    {sipName_EditFeature, static_cast<int>(QDesignerFormWindowInterface::EditFeature), 13},
    {sipName_GridFeature, static_cast<int>(QDesignerFormWindowInterface::GridFeature), 13},
    {sipName_TabOrderFeature, static_cast<int>(QDesignerFormWindowInterface::TabOrderFeature), 13},
};


/* Define this type's signals. */
static const pyqt4QtSignal signals_QDesignerFormWindowInterface[] = {
    {"objectRemoved(QObject*)", "\1objectRemoved(self, QObject)", 0, 0},
    {"widgetRemoved(QWidget*)", "\1widgetRemoved(self, QWidget)", 0, 0},
    {"changed()", "\1changed(self)", 0, 0},
    {"activated(QWidget*)", "\1activated(self, QWidget)", 0, 0},
    {"aboutToUnmanageWidget(QWidget*)", "\1aboutToUnmanageWidget(self, QWidget)", 0, 0},
    {"widgetUnmanaged(QWidget*)", "\1widgetUnmanaged(self, QWidget)", 0, 0},
    {"widgetManaged(QWidget*)", "\1widgetManaged(self, QWidget)", 0, 0},
    {"resourceFilesChanged()", "\1resourceFilesChanged(self)", 0, 0},
    {"geometryChanged()", "\1geometryChanged(self)", 0, 0},
    {"selectionChanged()", "\1selectionChanged(self)", 0, 0},
    {"featureChanged(QDesignerFormWindowInterface::Feature)", "\1featureChanged(self, QDesignerFormWindowInterface.Feature)", 0, 0},
    {"fileNameChanged(QString)", "\1fileNameChanged(self, QString)", 0, 0},
    {"mainContainerChanged(QWidget*)", "\1mainContainerChanged(self, QWidget)", 0, 0},
    {0, 0, 0, 0}
};


pyqt4ClassTypeDef sipTypeDef_QtDesigner_QDesignerFormWindowInterface = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QDesignerFormWindowInterface,
        {0}
    },
    {
        sipNameNr_QDesignerFormWindowInterface,
        {0, 0, 1},
        44, methods_QDesignerFormWindowInterface,
        4, enummembers_QDesignerFormWindowInterface,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_QDesignerFormWindowInterface,
    0,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QDesignerFormWindowInterface,
    0,
    0,
    0,
    release_QDesignerFormWindowInterface,
    cast_QDesignerFormWindowInterface,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QDesignerFormWindowInterface::staticMetaObject,
    0,
    signals_QDesignerFormWindowInterface,
};
